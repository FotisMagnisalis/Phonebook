{"version":3,"sources":["services/numbers.js","Components/AddForm.js","Components/Filter.js","Components/People.js","Components/notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","AddForm","persons","setPersons","setNotif","setNotifType","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","newPerson","name","trim","number","some","person","window","confirm","find","n","numbersServices","returnedPerson","map","catch","error","setTimeout","filter","returnedNumber","concat","alert","value","onChange","target","type","Filter","setNewFilter","Person","deletePerson","style","display","padding","onClick","People","peopleToShow","includes","Notification","message","className","App","notification","notificationType","useEffect","initialNumbers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a17975.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteNumber = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create,deleteNumber, update }\r\n","import React, { useState } from 'react'\r\nimport numbersServices from '../services/numbers'\r\n\r\n\r\nconst AddForm = ({persons,setPersons,setNotif,setNotifType}) => {\r\n    \r\n    //State variables\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    //Check if both fields are filled\r\n    if(newName === '' || newNumber === '') {\r\n      window.alert('Both fields are not filled')\r\n      return\r\n    }\r\n\r\n    //Instansiate new Person Object\r\n    const newPerson = {\r\n      name:newName.trim(),\r\n      number:newNumber.trim()\r\n    }\r\n\r\n    if(persons.some(person => person.name === newPerson.name && window.confirm(`${newPerson.name} is already added to the phonebook, replace the old number with the new one ?`))){\r\n      const id = persons.find(n => n.name === newPerson.name).id\r\n      numbersServices\r\n      .update(id,newPerson)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.map(person=>person.name !== returnedPerson.name ? person : returnedPerson))\r\n      })\r\n      .catch(error => {\r\n        setNotif(\r\n          `Information for ${newPerson.name} was already removed from server`\r\n        )\r\n        setNotifType('Error')\r\n        setTimeout(() => {\r\n          setNotif(null)\r\n        }, 5000)\r\n        setPersons(persons.filter(n => n.name !== newPerson.name))\r\n      })\r\n    } else {\r\n      numbersServices\r\n        .create(newPerson)\r\n        .then(returnedNumber => {\r\n          setPersons(persons.concat(returnedNumber))\r\n        })\r\n      setNotif(`Phonenumber for ${newPerson.name} was added`)\r\n      setNotifType('Added')\r\n      setTimeout(() => {\r\n        setNotif(null)\r\n      }, 5000)\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n\r\n  //Handle form changes\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <header>\r\n        <h1>Add New Person</h1>\r\n          <form onSubmit={addPerson}>\r\n            <div>\r\n              <b>Name:</b>\r\n              <input value={newName} onChange={handleNameChange}/><br/>\r\n              <b>Number:</b>\r\n              <input value={newNumber} onChange={handleNumberChange}/>\r\n            </div>\r\n            <div>\r\n             <button type=\"submit\">Add</button>\r\n           </div>\r\n          </form>\r\n      </header>\r\n  )\r\n}\r\n\r\nexport default AddForm","import React from 'react'\r\n\r\nconst Filter = ({filter,setNewFilter}) => {\r\n\r\n    const handleFilterChange = (event) => {\r\n        setNewFilter(event.target.value)\r\n    }\r\n\r\n    return(\r\n        <header>\r\n            <h1>Phonebook</h1>\r\n            <b>Filter</b>\r\n            <input value={filter} onChange={handleFilterChange}/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\nimport numbersServices from '../services/numbers'\r\n\r\n\r\nconst Person = ({person,deletePerson}) => {\r\n    return(\r\n      <div>\r\n        <p style={{display : 'inline-block',padding: '5px'}} > {person.name}: {person.number}</p>\r\n        <button onClick={deletePerson}>delete</button>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  const People = ({persons,filter,setPersons}) => {\r\n\r\n    const peopleToShow = persons.filter(person=>person.name.includes(filter))\r\n    \r\n    const deletePerson = (id,name) => {\r\n      if(window.confirm(`Delete ${name} ?`))\r\n      {\r\n        numbersServices.deleteNumber(id)\r\n        setPersons(persons.filter(n => n.id !== id))\r\n      }\r\n    }\r\n\r\n    return(\r\n    <header>\r\n      <h1>Numbers</h1>\r\n      {peopleToShow.map(person => \r\n      <Person \r\n      key={person.name} \r\n      person={person}\r\n      deletePerson={()=>deletePerson(person.id,person.name)}/>)}\r\n    </header>\r\n    )\r\n  }\r\n  \r\n  export default People","import React from 'react'\r\n\r\nconst Notification = ({ type,message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className={type}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState,useEffect } from 'react'\nimport AddForm from './Components/AddForm'\nimport Filter from './Components/Filter'\nimport People from './Components/People'\nimport numbersServices from './services/numbers'\nimport Notification from './Components/notification'\n\nconst App = () => {\n  //Person list \n  const [persons, setPersons] = useState([])\n  const [notification, setNotif] = useState(null)\n  const [notificationType, setNotifType] = useState(null)\n\n  useEffect(() => {\n    numbersServices\n      .getAll()\n      .then(initialNumbers => {\n        setPersons(initialNumbers)\n    })\n  }, [])\n\n  //Filter state\n  const [filter,setNewFilter] = useState('')\n\n  return (\n    <div>\n      <Notification message={notification} type={notificationType}/>\n      <Filter filter={filter} setNewFilter={setNewFilter}/>\n      <AddForm persons={persons} setPersons={setPersons} setNotif={setNotif} setNotifType={setNotifType}/>\n      <People persons={persons} filter={filter} setPersons={setPersons}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}